		lw	  $0, 0($0)  # "write to $0"
		lw    $1, 16($0) # $1 = 7fffffff
		addi  $2, $1, 4  # $2 = $1 + 4, "Number Overflow", $2 = 80000003
		bne   $3, $4, flag   # ($3 = $4 = 0) if $3 != $4, jump to flag
		xor   $1, $2, $3 # $3 = $2 xor $1, $3 = fffffffc, next bne will jump to flag
		j 	  0x0000002c # for test jumping to the front of init pc
flag: 	addi  $2, $1, 5  # $2 = $1 + 5, "Number Overflow", $2 = 80000004
		# test for mulSet and mulGet
		mul   $2, $3 
		mul   $2, $3 	# occure the "over write HI-LO"
		mfhi  $2
		mflo  $3
		# test for logical operation, recursively
		and	  $1, $2, $3
		or    $2, $3, $1
		xor   $3, $1, $2
		nor   $1, $2, $3
		nand  $2, $3, $1
		andi  $3, $1, 5
		ori   $1, $2, 6
		nori  $2, $3, 7
		# test for computational operation
		lw    $1, 16($0) # $1 = 7fffffff
		addiu $2, $1, 0x8007
		addi  $2, $1, 0x8007
		lw    $2, 8($0) # $2 = ffffffff
		add   $3, $1, $2
		addu  $3, $1, $2
		sub   $3, $1, $2
		# test for load
		lb    $3, 1($0) # need to do sign extension
		lh	  $3, 2($0) # $3 = 0000001f
		lw 	  $3, -27($3) 
		lbu   $3, 1($0) # no sign extension
		lhu   $3, -83($3)
		lw    $3, 1020($0)
		lh    $3, 1022($0)
		lb    $3, 1023($0)
		# test for save
		lw    $2, 4($0)
		sw    $3, 1020($0)
		sh 	  $3, 1022($0)


100011 00000 00000 0000000000010000
100011 00000 00001 0000000000010000
001000 00001 00010 0000000000000100 
000101 00011 00100 0000000000000010
000000 00001 00010 00011 00000 100110
000010 00000000000000000000001011
001000 00001 00010 0000000000000101 
# test for mulSet and mulGet
000000 00010 00011 00000 00000 011000
000000 00010 00011 00000 00000 011000
000000 00000 00000 00010 00000 010000
000000 00000 00000 00011 00000 010010
# test for logical operation
000000 00010 00011 00001 00000 100100
000000 00011 00001 00010 00000 100101
000000 00001 00010 00011 00000 100110
000000 00010 00011 00001 00000 100111
000000 00011 00001 00010 00000 101000
001100 00001 00011 0000000000000101
001101 00010 00001 0000000000000110
001110 00011 00010 0000000000000111
# test for computational operation
100011 00000 00001 0000000000010000
001001 00001 00010 1000000000000100 
001000 00001 00010 1000000000000100 
100011 00000 00010 0000000000001000
000000 00001 00010 00011 00000 100000
000000 00001 00010 00011 00000 100001
000000 00001 00010 00011 00000 100010
# test for load
100000 00000 00011 0000000000000001
100001 00000 00011 0000000000000010
100011 00011 00011 1111111111100101
100100 00000 00011 0000000000000001
100101 00011 00011 1111111101111101
100011 00000 00011 0000001111111100
100001 00000 00011 0000001111111110
100000 00000 00011 0000001111111111
# test for save
100011 00000 00010 0000000000000100
101011 00000 00011 0000001111111100
101001 00000 00011 0000001111111110
101000 00000 00011 0000001111111111








